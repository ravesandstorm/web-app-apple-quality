<%- include('./partials/header') %>

<div class="container-large">
    <h1 class="fade-in">üçé Apple Quality Classification üçè</h1>

    <div class="main-layout">
        <!-- Left Section (Tables) -->
        <div class="table-section">
            <div class="tabs-container">
                <div class="tabs">
                    <button class="tab-btn active" data-tab="classification">Classification</button>
                    <button class="tab-btn" data-tab="scaling">Normalization/Scaling</button>
                    <button class="tab-btn" data-tab="tuning">Hyperparameter Tuning</button>
                </div>
                
                <!-- Classification Table -->
                <div id="classification" class="tab-content active">
                    <h2>üìä Classification Metrics</h2>
                    <table id="resultsTable">
                        <thead>
                            <tr>
                                <th>Model</th>
                                <th>Accuracy</th>
                                <th>Precision</th>
                                <th>Recall</th>
                                <th>F1 Score</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>

                <!-- Scaling Table -->
                <div id="scaling" class="tab-content">
                    <h2>üî¨ Scaling Metrics</h2>
                    <table id="scalingTable">
                        <thead>
                            <tr>
                                <th>Method</th>
                                <th>KNN</th>
                                <th>SVM</th>
                                <th>Decision Tree</th>
                                <th>Random Forest</th>
                                <th>Naive Bayes</th>
                                <th>Gradient Boosting</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>

                <!-- Tuning Table -->
                <div id="tuning" class="tab-content">
                    <h2>üéØ Tuning Metrics</h2>
                    <table id="tuningTable">
                        <thead>
                            <tr>
                                <th>Model</th>
                                <th>CV Accuracy</th>
                                <th>CV Precision</th>
                                <th>CV Recall</th>
                                <th>CV F1-Score</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            
            <!-- New User Input Section -->
            <div class="user-input-section">
                <h2>üîç Test Your Own Apple</h2>
                <div class="input-form">
                    <div class="input-grid">
                        <div class="input-group">
                            <label for="size">Size:</label>
                            <input type="number" id="size" step="0.01" placeholder="Enter apple size">
                        </div>
                        <div class="input-group">
                            <label for="weight">Weight:</label>
                            <input type="number" id="weight" step="0.01" placeholder="Enter apple weight">
                        </div>
                        <div class="input-group">
                            <label for="sweetness">Sweetness:</label>
                            <input type="number" id="sweetness" step="0.01" placeholder="Enter sweetness level">
                        </div>
                        <div class="input-group">
                            <label for="crunchiness">Crunchiness:</label>
                            <input type="number" id="crunchiness" step="0.01" placeholder="Enter crunchiness level">
                        </div>
                        <div class="input-group">
                            <label for="juiciness">Juiciness:</label>
                            <input type="number" id="juiciness" step="0.01" placeholder="Enter juiciness level">
                        </div>
                        <div class="input-group">
                            <label for="ripeness">Ripeness:</label>
                            <input type="number" id="ripeness" step="0.01" placeholder="Enter ripeness level">
                        </div>
                        <div class="input-group">
                            <label for="acidity">Acidity:</label>
                            <input type="number" id="acidity" step="0.01" placeholder="Enter acidity level">
                        </div>
                    </div>
                    <div class="input-actions">
                        <button id="predictBtn" class="btn scale-hover">
                            <span>Predict Quality</span>
                        </button>
                        <button id="resetBtn" class="btn btn-secondary scale-hover">
                            <span>Reset</span>
                        </button>
                    </div>
                </div>
                
                <!-- User Input Prediction Result -->
                <div id="user-prediction-result" class="user-prediction-result hidden">
                    <div class="result-container">
                        <div class="result-icon">
                            <div id="user-result-icon" class="apple-icon"></div>
                        </div>
                        <div class="result-text">
                            <h3>Prediction Result:</h3>
                            <p>This apple is predicted to be <span id="qualityResult">-</span></p>
                            <div class="quality-indicator">
                                <div id="quality-label" class="quality-label">-</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Section (Prediction) -->
        <div class="prediction-section">
            <div class="prediction-header">
                <h2>Prediction üîÆ</h2>
                <button id="loadPredictionBtn" class="btn scale-hover">
                    <span id="buttonText">Get New Sample</span>
                </button>
            </div>
            
            <!-- Updated prediction indicator with split layout -->
            <div id="prediction-result-indicator" class="prediction-indicator">
                <div class="prediction-result-left">
                    <div class="prediction-values">
                        <div class="prediction-value-item">
                            <span class="value-label">Actual:</span>
                            <span id="actualValue" class="value-text">-</span>
                        </div>
                        <div class="prediction-value-item">
                            <span class="value-label">Predicted:</span>
                            <span id="predictedValue" class="value-text">-</span>
                        </div>
                    </div>
                </div>
                <div class="prediction-result-right">
                    <div id="prediction-icon" class="prediction-icon"></div>
                </div>
            </div>
            
            <!-- Updated vertical probability bars -->
            <div class="probability-section">
                <h4>Prediction Probabilities</h4>
                <div class="probability-bars-container">
                    <div class="probability-item">
                        <div class="vertical-bar-container">
                            <div class="vertical-bar-label">Probability of 0</div>
                            <div class="vertical-bar-outer">
                                <div id="probBar0" class="vertical-bar-inner"></div>
                            </div>
                            <div id="prob0" class="vertical-bar-value">0%</div>
                        </div>
                    </div>
                    <div class="probability-item">
                        <div class="vertical-bar-container">
                            <div class="vertical-bar-label">Probability of 1</div>
                            <div class="vertical-bar-outer">
                                <div id="probBar1" class="vertical-bar-inner"></div>
                            </div>
                            <div id="prob1" class="vertical-bar-value">0%</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="features-table">
                <h3>Sample Features</h3>
                <div class="table-container">
                    <table id="predictionTable">
                        <thead>
                            <tr>
                                <th>Feature</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .container-large {
        width: 95%;
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .main-layout {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }
    
    /* Table section styles */
    .table-section {
        width: 75%;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        padding: 20px;
    }
    
    .tabs-container {
        width: 100%;
        margin-bottom: 30px;
    }
    
    .tabs {
        display: flex;
        margin-bottom: 20px;
        border-bottom: 1px solid #ddd;
    }
    
    .tab-btn {
        padding: 10px 20px;
        border: none;
        background: transparent;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .tab-btn.active {
        border-bottom: 3px solid #4CAF50;
        color: #1f1f1f;
    }
    
    .tab-content {
        display: none;
    }
    
    .tab-content.active {
        display: block;
    }
    
    /* User Input Section */
    .user-input-section {
        margin-top: 30px;
        padding: 20px;
        background-color: #f5f9f5;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .input-form {
        margin-top: 15px;
    }
    
    .input-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
    }
    
    .input-group {
        display: flex;
        flex-direction: column;
    }
    
    .input-group label {
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .input-group input {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        transition: border-color 0.3s ease;
    }
    
    .input-group input:focus {
        border-color: #4CAF50;
        outline: none;
    }
    
    .input-actions {
        margin-top: 20px;
        display: flex;
        gap: 15px;
    }
    
    .btn-secondary {
        background-color: #6c757d;
    }
    
    .btn-secondary:hover {
        background-color: #5a6268;
    }
    
    /* User Prediction Result */
    .user-prediction-result {
        margin-top: 20px;
        padding: 15px;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        opacity: 0;
        transform: translateY(10px);
    }
    
    .user-prediction-result.visible {
        opacity: 1;
        transform: translateY(0);
    }
    
    .hidden {
        display: none;
    }
    
    .result-container {
        display: flex;
        align-items: center;
        gap: 20px;
    }
    
    .result-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 80px;
        height: 80px;
    }
    
    .apple-icon {
        font-size: 60px;
        animation: popIn 0.5s ease-out;
    }
    
    .apple-icon.good::before {
        content: "üçè";
    }
    
    .apple-icon.bad::before {
        content: "üçé";
    }
    
    .result-text {
        flex: 1;
    }
    
    .result-text h3 {
        margin-top: 0;
        margin-bottom: 10px;
    }
    
    .result-text p {
        margin-bottom: 10px;
        font-size: 18px;
    }
    
    .quality-indicator {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: bold;
        animation: fadeIn 0.5s ease-out;
    }
    
    .quality-label {
        font-size: 16px;
        text-transform: uppercase;
    }
    
    .quality-good {
        background-color: #dcf7dc;
        color: #2e7d32;
        border: 1px solid #2e7d32;
    }
    
    .quality-bad {
        background-color: #fbe9e7;
        color: #c62828;
        border: 1px solid #c62828;
    }
    
    @keyframes popIn {
        0% {
            transform: scale(0);
        }
        50% {
            transform: scale(1.2);
        }
        100% {
            transform: scale(1);
        }
    }
    
    @keyframes fadeIn {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    
    /* Prediction section styles */
    .prediction-section {
        width: 25%;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .prediction-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .prediction-header h2 {
        margin: 0;
    }
    
    /* Updated button with loading spinner */
    .btn {
        padding: 8px 16px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        min-width: 140px;
    }
    
    .btn:hover {
        background-color: #45a049;
        transform: scale(1.05);
    }
    
    .btn:active {
        transform: scale(0.98);
        background-color: #3d8b40;
    }
    
    /* Spinner for button */
    .spinner {
        width: 16px;
        height: 16px;
        border: 3px solid rgba(255,255,255,0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    .hide {
        display: none;
    }
    
    /* Updated prediction indicator with split layout */
    .prediction-indicator {
        display: flex;
        margin: 1px 0;
        border-radius: 8px;
        transition: background-color 0.5s ease;
        height: 90px;
        overflow: hidden;
    }
    
    .prediction-result-left {
        flex: 2;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        background-color: #f0f0f0;
        border-top-left-radius: 8px;
        border-bottom-left-radius: 8px;
    }
    
    .prediction-result-right {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        border-top-right-radius: 8px;
        border-bottom-right-radius: 8px;
        transition: background-color 0.5s ease;
    }
    
    .prediction-values {
        width: 100%;
    }
    
    .prediction-value-item {
        margin-bottom: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px;
        background-color: white;
        border-radius: 4px;
    }
    
    .value-label {
        font-weight: bold;
    }
    
    .value-text {
        font-size: 16px;
    }
    
    /* Updated prediction icon with bounce animation */
    .prediction-icon {
        font-size: 48px;
        transition: all 0.3s ease;
        animation-duration: 0.5s;
        animation-fill-mode: both;
    }
    
    .prediction-icon.correct {
        animation-name: iconBounce;
    }
    
    .prediction-icon.incorrect {
        animation-name: iconBounce;
    }
    
    .prediction-icon.correct::before {
        content: "‚úì";
        color: white;
        font-weight: bold;
    }
    
    .prediction-icon.incorrect::before {
        content: "‚úó";
        color: white;
        font-weight: bold;
    }
    
    @keyframes iconBounce {
        0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
        40% {transform: translateY(-20px) scale(1.2);}
        60% {transform: translateY(-10px);}
    }
    
    /* Updated vertical probability bars */
    .probability-section {
        margin-bottom: 15px;
    }
    
    .probability-bars-container {
        display: flex;
        justify-content: space-around;
        margin-top: 15px;
        height: 200px;
    }
    
    .probability-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        padding: 0 10px;
    }
    
    .vertical-bar-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        height: 100%;
        width: 100%;
    }
    
    .vertical-bar-label {
        margin-bottom: 8px;
        font-weight: bold;
        text-align: center;
    }
    
    .vertical-bar-outer {
        width: 50px;
        height: 150px;
        background-color: #e0e0e0;
        border-radius: 5px;
        position: relative;
        overflow: hidden;
    }
    
    .vertical-bar-inner {
        width: 100%;
        position: absolute;
        bottom: 0;
        transition: height 0.3s ease;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
    
    #probBar0 {
        background-color: #ff7c54;
        height: 0%;
    }
    
    #probBar1 {
        background-color: #57b3ff;
        height: 0%;
    }
    
    .vertical-bar-value {
        margin-top: 8px;
        font-weight: bold;
        text-align: center;
    }
    
    /* Table styles */
    .features-table {
        flex-grow: 1;
        overflow: hidden;
    }
    
    .table-container {
        max-height: 200px;
        overflow-y: auto;
    }
    
    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }
    
    th, td {
        padding: 12px;
        text-align: left;
        border: 1px solid #ddd;
    }
    
    th {
        background-color: #f5f5f5;
        font-weight: bold;
        color: #1f1f1f;
    }
    
    tr:nth-child(even) {
        background-color: #f9f9f9;
    }
    
    tr:hover {
        background-color: #defbff;
    }
    
    #predictionTable {
        width: 100%;
        border-collapse: collapse;
    }
    
    #predictionTable th, #predictionTable td {
        padding: 8px;
        border: 1px solid #ddd;
        text-align: left;
    }
    
    #predictionTable th {
        background-color: #f2f2f2;
        position: sticky;
        top: 0;
    }
</style>

<script>
    // Load data when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        // Load all data immediately
        loadClassificationData();
        loadScalingData();
        loadTuningData();
        loadPredictionData();
        setupUserInputHandlers();
        window.scrollTo(0,0);
    });

    // Table tabs functionality
    const tabs = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(t => t.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            tab.classList.add('active');
            document.getElementById(tab.dataset.tab).classList.add('active');
        });
    });

    // CLASSIFICATION RESULTS
    async function loadClassificationData() {
        const tableBody = document.querySelector('#resultsTable tbody');
        tableBody.innerHTML = '';

        try {
            const response = await fetch('http://localhost:8000/table1/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.Model}</td>
                    <td>${row.Accuracy}%</td>
                    <td>${row.Precision}%</td>
                    <td>${row.Recall}%</td>
                    <td>${row['F1 Score']}%</td>
                `;
                tableBody.appendChild(tr);
            });
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // SCALING
    async function loadScalingData() {
        const tableBody = document.querySelector('#scalingTable tbody');
        tableBody.innerHTML = '';

        try {
            const response = await fetch('http://localhost:8000/table2/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.Method}</td>
                    <td>${row.KNN}%</td>
                    <td>${row.SVM}%</td>
                    <td>${row['Decision Tree']}%</td>
                    <td>${row['Random Forest']}%</td>
                    <td>${row['Naive Bayes']}%</td>
                    <td>${row['Gradient Boosting']}%</td>
                `;
                tableBody.appendChild(tr);
            });
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // TUNING
    async function loadTuningData() {
        const tableBody = document.querySelector('#tuningTable tbody');
        tableBody.innerHTML = '';

        try {
            const response = await fetch('http://localhost:8000/table3/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.Model}</td>
                    <td>${row['CV Accuracy']}%</td>
                    <td>${row['CV Precision']}%</td>
                    <td>${row['CV Recall']}%</td>
                    <td>${row['CV F1-Score']}%</td>
                `;
                tableBody.appendChild(tr);
            });
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // PREDICTION RESULTS
    async function loadPredictionData() {
        try {
            const response = await fetch('http://localhost:8000/predict/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const dataArray = await response.json();
            const data = dataArray[0];
            console.log('Prediction Data:', data);

            // Populate features table
            const tableBody = document.querySelector('#predictionTable tbody');
            tableBody.innerHTML = ''; // Clear previous data
            data.Columns.forEach((col, index) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${col}</td><td>${data.Data[index]}</td>`;
                tableBody.appendChild(tr);
            });

            // Display prediction results
            document.getElementById('actualValue').innerText = data.Actual;
            document.getElementById('predictedValue').innerText = data.Predicted;
            
            // Update vertical probability bars
            const prob0Value = (data['Prob 0'] * 100).toFixed(2);
            const prob1Value = (data['Prob 1'] * 100).toFixed(2);
            
            document.getElementById('prob0').innerText = `${prob0Value}%`;
            document.getElementById('prob1').innerText = `${prob1Value}%`;
            
            document.getElementById('probBar0').style.height = `${prob0Value}%`;
            document.getElementById('probBar1').style.height = `${prob1Value}%`;
            
            // Update prediction indicator
            const predictionRightPart = document.querySelector('.prediction-result-right');
            const predictionIcon = document.getElementById('prediction-icon');
            
            // Compare actual and predicted values
            const isCorrect = data.Actual == data.Predicted;
            
            // Update indicator background color
            predictionRightPart.style.backgroundColor = isCorrect ? '#4CAF50' : '#F44336';
            
            // Force reflow to reset animation
            predictionIcon.classList.remove('correct', 'incorrect');
            void predictionIcon.offsetWidth; // Trigger reflow
            
            // Update indicator icon with animation
            predictionIcon.classList.add(isCorrect ? 'correct' : 'incorrect');
            
        } catch (error) {
            console.error('Error fetching prediction:', error);
        }
    }

    // Get new prediction button
    document.getElementById('loadPredictionBtn').addEventListener('click', loadPredictionData);
    
    // USER INPUT FUNCTIONALITY
    function setupUserInputHandlers() {
        // Get the predict and reset buttons
        const predictBtn = document.getElementById('predictBtn');
        const resetBtn = document.getElementById('resetBtn');
        
        // Predict button click handler
        predictBtn.addEventListener('click', async () => {
            // Get all input values
            const size = document.getElementById('size').value;
            const weight = document.getElementById('weight').value;
            const sweetness = document.getElementById('sweetness').value;
            const crunchiness = document.getElementById('crunchiness').value;
            const juiciness = document.getElementById('juiciness').value;
            const ripeness = document.getElementById('ripeness').value;
            const acidity = document.getElementById('acidity').value;
            
            // Check if all fields are filled
            if (!size || !weight || !sweetness || !crunchiness || !juiciness || !ripeness || !acidity) {
                alert('Please fill in all the fields');
                return;
            }
            
            // Create payload for the API
            const payload = {
                size: parseFloat(size),
                weight: parseFloat(weight),
                sweetness: parseFloat(sweetness),
                crunchiness: parseFloat(crunchiness),
                juiciness: parseFloat(juiciness),
                ripeness: parseFloat(ripeness),
                acidity: parseFloat(acidity)
            };
            
            // Show loading state
            predictBtn.disabled = true;
            const originalText = predictBtn.innerHTML;
            predictBtn.innerHTML = '<div class="spinner"></div><span>Processing...</span>';
            
            try {
                // Make API call
                const response = await fetch('http://localhost:8000/input/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                // Process response
                const data = await response.json();
                console.log('User Input Prediction Result:', data);
                
                // Display the result
                displayUserPredictionResult(data.prediction);
                
            } catch (error) {
                console.error('Error making prediction:', error);
                alert('An error occurred while making the prediction. Please try again.');
            } finally {
                // Restore button state
                predictBtn.disabled = false;
                predictBtn.innerHTML = originalText;
            }
        });
        
        // Reset button click handler
        resetBtn.addEventListener('click', () => {
            // Clear all input fields
            document.getElementById('size').value = '';
            document.getElementById('weight').value = '';
            document.getElementById('sweetness').value = '';
            document.getElementById('crunchiness').value = '';
            document.getElementById('juiciness').value = '';
            document.getElementById('ripeness').value = '';
            document.getElementById('acidity').value = '';
            
            // Hide the prediction result
            document.getElementById('user-prediction-result').classList.add('hidden');
            document.getElementById('user-prediction-result').classList.remove('visible');
        });
    }
    
// Display user prediction result
function displayUserPredictionResult(prediction) {
    const resultContainer = document.getElementById('user-prediction-result');
    const qualityResult = document.getElementById('qualityResult');
    const qualityLabel = document.getElementById('quality-label');
    const appleIcon = document.getElementById('user-result-icon');
    
    // Set the prediction text and styling
    if (prediction === 1) {
        qualityResult.textContent = 'Good Quality';
        qualityLabel.textContent = 'GOOD';
        qualityLabel.className = 'quality-label quality-good';
        appleIcon.className = 'apple-icon good';
    } else {
        qualityResult.textContent = 'Bad Quality';
        qualityLabel.textContent = 'BAD';
        qualityLabel.className = 'quality-label quality-bad';
        appleIcon.className = 'apple-icon bad';
    }
    
    // Show the result container with animation
    resultContainer.classList.remove('hidden');
    // Force reflow to ensure animation plays
    void resultContainer.offsetWidth;
    resultContainer.classList.add('visible');
}
</script>

<%- include('./partials/footer') %>